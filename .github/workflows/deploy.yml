name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Enable verbose execution tracing
            set -x
            
            echo "====== DEPLOYMENT HAS STARTED: $(date) ======"
            echo "Current directory: $(pwd)"
            
            # Navigate to repository directory
            cd /home/ubuntu/agastya-connect
            echo "Changed to directory: $(pwd)"
            
            # Check for local changes that might prevent pull
            echo "Checking for uncommitted changes..."
            git status
            
            # Check current branch
            echo "Current branch:"
            git branch
            
            # Store current git hash to compare later
            OLD_COMMIT=$(git rev-parse HEAD)
            echo "Current commit hash: $OLD_COMMIT"
            
            # Check remote tracking
            echo "Remote tracking information:"
            git remote -v
            git branch -vv
            
            # Change remote URL from HTTPS to SSH for private repo access
            echo "Switching remote URL to SSH..."
            git remote set-url origin git@github.com:projectagastya/agastya-connect.git

            # Verify the change
            echo "Updated remote URL:"
            git remote -v
            
            # Fetch latest changes before pull
            echo "Fetching latest changes..."
            git fetch origin
            
            # Show differences between local and remote
            echo "Differences between local and remote:"
            git log HEAD..origin/main --oneline

            # Forcefully reset the local branch to match the remote branch.
            # This discards all local changes to tracked files and makes 'git pull' unnecessary.
            echo "Resetting local branch to match origin/main..."
            git reset --hard origin/main
            
            # Clean up any untracked files and directories.
            # This will NOT remove 'static/welcome.html' if it's in your .gitignore file.
            echo "Cleaning untracked files..."
            git clean -fd
            
            # Check new commit hash
            NEW_COMMIT=$(git rev-parse HEAD)
            echo "New commit hash: $NEW_COMMIT"
            
            # Force comparison output to be visible
            echo "Comparing OLD_COMMIT: $OLD_COMMIT with NEW_COMMIT: $NEW_COMMIT"
            
            # If code has changed, update dependencies and restart services
            if [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
              echo "Changes detected, proceeding with deployment..."
              
              # Activate virtual environment
              echo "Activating virtual environment..."
              source venv/bin/activate
              
              # Update dependencies only if requirements.txt has changed
              if git diff --name-only $OLD_COMMIT $NEW_COMMIT | grep -q "requirements.txt"; then
                echo "requirements.txt changed, updating dependencies..."
                pip install -r requirements.txt
              else
                echo "requirements.txt unchanged, skipping dependency updates."
              fi
              
              # Update systemd service files with safety checks
              echo "Checking and updating systemd service files..."
              
              # Verify service files exist before copying
              if [ -f "services/ec2-linux/fastapi.service" ] && [ -f "services/ec2-linux/streamlit.service" ]; then
                # Backup existing service files
                sudo cp /etc/systemd/system/fastapi.service /etc/systemd/system/fastapi.service.backup 2>/dev/null || true
                sudo cp /etc/systemd/system/streamlit.service /etc/systemd/system/streamlit.service.backup 2>/dev/null || true
                
                # Copy the service files to systemd directory
                sudo cp -f services/ec2-linux/fastapi.service /etc/systemd/system/fastapi.service
                sudo cp -f services/ec2-linux/streamlit.service /etc/systemd/system/streamlit.service
                
                # Verify new service files are valid
                if sudo systemd-analyze verify /etc/systemd/system/fastapi.service && \
                   sudo systemd-analyze verify /etc/systemd/system/streamlit.service; then
                  # Reload systemd to recognize changes
                  sudo systemctl daemon-reload
                  echo "Systemd service files updated and daemon reloaded."
                  # Remove backups after successful verification
                  sudo rm -f /etc/systemd/system/*.backup
                else
                  echo "ERROR: New service files are invalid! Rolling back..."
                  # Restore from backup
                  sudo cp -f /etc/systemd/system/fastapi.service.backup /etc/systemd/system/fastapi.service 2>/dev/null || true
                  sudo cp -f /etc/systemd/system/streamlit.service.backup /etc/systemd/system/streamlit.service 2>/dev/null || true
                  sudo systemctl daemon-reload
                  sudo rm -f /etc/systemd/system/*.backup
                  exit 1
                fi
              else
                echo "ERROR: Service files not found in services/ec2-linux/ directory!"
                exit 1
              fi
              
              # Restart services
              echo "Restarting services..."
              sudo systemctl status fastapi streamlit || true
              sudo systemctl restart fastapi streamlit
              sudo systemctl status fastapi streamlit || true
              
              echo "====== DEPLOYMENT COMPLETED SUCCESSFULLY: $(date) ======"
            else
              echo "No changes detected. Commit hashes are identical."
              echo "OLD_COMMIT: $OLD_COMMIT"
              echo "NEW_COMMIT: $NEW_COMMIT"
              echo "Skipping deployment."
              echo "====== DEPLOYMENT HAS BEEN SKIPPED: $(date) ======"
            fi
name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Enable verbose execution tracing
            set -x
            
            echo "====== DEPLOYMENT STARTED: $(date) ======"
            echo "Current directory: $(pwd)"
            
            # Navigate to repository directory
            cd /home/ubuntu/agastya-connect
            echo "Changed to directory: $(pwd)"
            
            # Check for local changes that might prevent pull
            echo "Checking for uncommitted changes..."
            git status
            
            # Check current branch
            echo "Current branch:"
            git branch
            
            # Store current git hash to compare later
            OLD_COMMIT=$(git rev-parse HEAD)
            echo "Current commit hash: $OLD_COMMIT"
            
            # Check remote tracking
            echo "Remote tracking information:"
            git remote -v
            git branch -vv
            
            # Fetch latest changes before pull
            echo "Fetching latest changes..."
            git fetch origin
            
            # Show differences between local and remote
            echo "Differences between local and remote:"
            git log HEAD..origin/main --oneline
            
            # Reset and clean
            git reset --hard HEAD
            git clean -fd
            
            # Set upstream branch
            git branch --set-upstream-to=origin/main main
            
            # Clean any potentially conflicting files that might block the pull
            echo "Cleaning any potential untracked files that might conflict..."
            git clean -f .github/workflows/deploy.yml || true
            git clean -f test.txt || true
            
            # Pull latest changes
            echo "Pulling latest changes..."
            git pull origin main
            
            # Check new commit hash
            NEW_COMMIT=$(git rev-parse HEAD)
            echo "New commit hash: $NEW_COMMIT"
            
            # Force comparison output to be visible
            echo "Comparing OLD_COMMIT: $OLD_COMMIT with NEW_COMMIT: $NEW_COMMIT"
            
            # If code has changed, update dependencies and restart services
            if [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
              echo "Changes detected, proceeding with deployment..."
              
              # Activate virtual environment
              echo "Activating virtual environment..."
              source venv/bin/activate
              
              # Update dependencies only if requirements.txt has changed
              if git diff --name-only $OLD_COMMIT $NEW_COMMIT | grep -q "requirements.txt"; then
                echo "requirements.txt changed, updating dependencies..."
                pip install -r requirements.txt
              else
                echo "requirements.txt unchanged, skipping dependency updates."
              fi
              
              # Check if service files have changed
              if git diff --name-only $OLD_COMMIT $NEW_COMMIT | grep -q "services/.*\.service"; then
                echo "Service definitions have changed, updating systemd files..."
                # Copy the service files to systemd directory
                sudo cp -f services/fastapi.service /etc/systemd/system/fastapi.service
                sudo cp -f services/streamlit.service /etc/systemd/system/streamlit.service
                # Reload systemd to recognize changes
                sudo systemctl daemon-reload
                echo "Systemd service files updated and daemon reloaded."
              else
                echo "Service definitions unchanged, skipping systemd updates."
              fi
              
              # Restart services
              echo "Restarting services..."
              sudo systemctl status fastapi streamlit || true
              sudo systemctl restart fastapi streamlit
              sudo systemctl status fastapi streamlit || true
              
              echo "====== DEPLOYMENT COMPLETED SUCCESSFULLY: $(date) ======"
            else
              echo "No changes detected. Commit hashes are identical."
              echo "OLD_COMMIT: $OLD_COMMIT"
              echo "NEW_COMMIT: $NEW_COMMIT"
              echo "Skipping deployment."
              echo "====== DEPLOYMENT SKIPPED: $(date) ======"
            fi
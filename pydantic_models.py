from datetime import datetime
from enum import Enum
from pydantic import BaseModel, Field

class GenerationModel(str, Enum):
    GPT_4O_MINI = "gpt-4o-mini"

class QueryInput(BaseModel):
    question: str = Field(..., min_length=1, description="The question being asked to the LLM.")
    chat_session_id: str = Field(default=None, example="session_123", description="Unique identifier for the chat session.")
    model: GenerationModel = Field(default=GenerationModel.GPT_4O_MINI, description="Model to be used for the query.")

class QueryResponse(BaseModel):
    answer: str = Field(..., min_length=1, description="The response generated by the model.")
    chat_session_id: str = Field(..., example="session_123", description="Unique identifier for the chat session.")
    model: GenerationModel = Field(..., description="Model used to generate the response.")

class DocumentInfo(BaseModel):
    document_id: int = Field(..., example=1, description="Unique identifier for the document.")
    chat_session_id: str = Field(..., example="session_123", description="Unique identifier for the chat session.")
    filename: str = Field(..., min_length=1, description="Name of the uploaded file.")
    upload_timestamp: datetime = Field(..., description="Timestamp when the file was uploaded.")

class DeleteFileRequest(BaseModel):
    chat_session_id: str = Field(..., min_length=1, description="Session ID for which the document needs to be deleted.")
